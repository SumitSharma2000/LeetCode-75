class Solution {
    int count = 0;

    public void dfs(int u, int parent, HashMap<Integer, List<Pair<Integer, Integer>>> adj) {
        for (Pair<Integer, Integer> p : adj.get(u)) {
            int v = p.getKey();
            int check = p.getValue();
            if (v != parent) {
                if (check == 1) {
                    count++;
                }
                dfs(v, u, adj);
            }
        }
    }

    public int minReorder(int n, int[][] connections) {
        // adj matrix
        HashMap<Integer, List<Pair<Integer, Integer>>> adj = new HashMap<>();
        for (int[] vec : connections) {
            int a = vec[0];
            int b = vec[1];

            if (!adj.containsKey(a)) {
                adj.put(a, new ArrayList<>());
            }
            if (!adj.containsKey(b)) {
                adj.put(b, new ArrayList<>());
            }

            adj.get(a).add(new Pair<>(b, 1)); // asli
            adj.get(b).add(new Pair<>(a, 0));
        }
        dfs(0, -1, adj);
        return count;
    }
}
