
class Solution {
    public int nearestExit(char[][] maze, int[] entrance) {
        int m = maze.length;
        int n = maze[0].length;
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(entrance);
        maze[entrance[0]][entrance[1]] = 'v'; // mark the entrance as visited
        
        int steps = 0;
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            
            for (int i = 0; i < size; i++) {
                int[] current = queue.poll();
                
                if (current[0] == 0 || current[0] == m - 1 || current[1] == 0 || current[1] == n - 1) {
                    if (current[0] != entrance[0] || current[1] != entrance[1]) {
                        return steps;
                    }
                }
                
                for (int[] dir : directions) {
                    int nextRow = current[0] + dir[0];
                    int nextCol = current[1] + dir[1];
                    
                    if (nextRow >= 0 && nextRow < m && nextCol >= 0 && nextCol < n && maze[nextRow][nextCol] == '.') {
                        maze[nextRow][nextCol] = 'v'; // mark the cell as visited
                        queue.offer(new int[]{nextRow, nextCol});
                    }
                }
            }
            
            steps++;
        }
        
        return -1;
    }
}
