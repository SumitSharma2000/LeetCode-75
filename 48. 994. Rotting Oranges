class Solution {
    public int orangesRotting(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int fresh = 0;
        int time = 0;
        Queue<Pair<Integer, Integer>> queue = new LinkedList<>();
        
        // BFS traversal to find rotten oranges and count fresh oranges
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    queue.offer(new Pair<>(i, j));
                } else if (grid[i][j] == 1) {
                    fresh++;
                }
            }
        }
        
        // If there are no fresh oranges, return 0
        if (fresh == 0) {
            return 0;
        }

        // Possible directions for rotten oranges to spread
        int[] dx = {1, -1, 0, 0};
        int[] dy = {0, 0, 1, -1};
        
        // BFS traversal to rot fresh oranges
        while (!queue.isEmpty()) {
            int size_q = queue.size();
            boolean rottenFound = false;
            
            for (int i = 0; i < size_q; i++) {
                Pair<Integer, Integer> p = queue.poll();
                int x1 = p.getKey();
                int y1 = p.getValue();
                
                for (int j = 0; j < 4; j++) {
                    int x = x1 + dx[j];
                    int y = y1 + dy[j];

                    if (x >= 0 && x < n && y >= 0 && y < m && grid[x][y] == 1) {
                        grid[x][y] = 2; // Rot the fresh orange
                        queue.offer(new Pair<>(x, y));
                        fresh--; // Decrement count of fresh oranges
                        rottenFound = true; // Indicate that a fresh orange has been rotten in this iteration
                    }
                }
            }
            
            if (rottenFound) {
                time++; // Increment time if at least one fresh orange has been rotten in this iteration
            }
        }
        
        // If there are still fresh oranges left, return -1
        if (fresh > 0) {
            return -1;
        }
        
        return time;
    }
}
