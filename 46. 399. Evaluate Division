class Solution {
    public void dfs(HashMap<String, ArrayList<Pair<String, Double>>> adj, String src,
                    String dst, HashSet<String> visited, double product, double[] ans) {
        if (visited.contains(src)) {
            return;
        }
        visited.add(src);
        if (src.equals(dst)) {
            ans[0] = product;
            return;
        }
        for (Pair<String, Double> p : adj.get(src)) {
            String v = p.getKey();
            double val = p.getValue();
            dfs(adj, v, dst, visited, product * val, ans);
            if (ans[0] != -1.0) // If a path is found, no need to explore further
                return;
        }
    }

    public double[] calcEquation(List<List<String>> equations, double[] values,
                                  List<List<String>> queries) {
        int size = equations.size();
        HashMap<String, ArrayList<Pair<String, Double>>> adj = new HashMap<>();
        for (int i = 0; i < size; i++) {
            String u = equations.get(i).get(0);  // a
            String v = equations.get(i).get(1);  // b
            double val = values[i];

            adj.computeIfAbsent(u, k -> new ArrayList<>()).add(new Pair<>(v, val));
            adj.computeIfAbsent(v, k -> new ArrayList<>()).add(new Pair<>(u, 1.0 / val));
        }
        double[] result = new double[queries.size()];
        for (int i = 0; i < queries.size(); i++) {
            List<String> query = queries.get(i);
            String src = query.get(0);
            String dst = query.get(1);

            double[] ans = new double[]{-1.0}; // Initialize ans with -1.0
            double product = 1.0;

            if (adj.containsKey(src)) {
                HashSet<String> visited = new HashSet<>();
                dfs(adj, src, dst, visited, product, ans);
            }
            result[i] = ans[0];
        }
        return result;
    }
}
